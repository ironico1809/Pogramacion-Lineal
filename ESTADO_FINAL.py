#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PROYECTO SIMPLEX - ESTADO FINAL
===============================

‚úÖ SISTEMA COMPLETAMENTE FUNCIONAL PARA RESOLVER PROBLEMAS DE PROGRAMACI√ìN LINEAL
   - M√©todo Gran M (SimplexTablaInicialCompleta)
   - M√©todo Dos Fases (SimplexDosFases)
   - Frontend React profesional
   - Backend FastAPI robusto

üìÅ ARCHIVOS PRINCIPALES:
‚îú‚îÄ‚îÄ src/App.tsx                     # Frontend completo (React + TypeScript)
‚îú‚îÄ‚îÄ src/App_CLEAN.css              # Estilos del frontend (sin duplicaciones)
‚îú‚îÄ‚îÄ src/api/api.py                 # Backend FastAPI
‚îú‚îÄ‚îÄ src/components/MetodoM_NEW.py   # Implementaci√≥n Gran M (ACTUALIZADA)
‚îú‚îÄ‚îÄ src/components/Metodo2F.py     # Implementaci√≥n Dos Fases
‚îú‚îÄ‚îÄ start.py                       # Script de inicio autom√°tico
‚îú‚îÄ‚îÄ test_integration.py            # Tests de integraci√≥n
‚îî‚îÄ‚îÄ requirements.txt               # Dependencias Python

üöÄ INSTRUCCIONES DE EJECUCI√ìN:

1. INSTALAR DEPENDENCIAS:
   pip install -r requirements.txt
   npm install

2. EJECUTAR EL SISTEMA:
   
   OPCI√ìN A - Autom√°tico:
   python start.py
   
   OPCI√ìN B - Manual:
   # Terminal 1: Backend
   python -m uvicorn src.api.api:app --host 0.0.0.0 --port 8000 --reload
   
   # Terminal 2: Frontend
   npm run dev
   
   # Abrir: http://localhost:5173

3. VERIFICAR FUNCIONAMIENTO:
   python test_integration.py

üîß CARACTER√çSTICAS DEL SISTEMA:

‚úÖ Frontend (React + TypeScript):
   - Interfaz moderna y profesional
   - Configuraci√≥n de problemas intuitiva
   - Visualizaci√≥n de iteraciones paso a paso
   - Mostrar tablas simplex completas
   - Responsive design

‚úÖ Backend (Python + FastAPI):
   - API REST robusta y r√°pida
   - Manejo completo del m√©todo Gran M con simbolos M
   - Soporte para minimizaci√≥n y maximizaci√≥n
   - Conversi√≥n autom√°tica de tipos de problemas
   - Iteraciones completas y detalladas

‚úÖ Integraci√≥n Frontend-Backend:
   - Comunicaci√≥n HTTP entre React y FastAPI
   - JSON como formato de intercambio
   - Manejo de errores y validaci√≥n
   - CORS configurado correctamente

üìä EJEMPLO DE USO:

El sistema puede resolver problemas como:

Max z = 3x‚ÇÅ + 2x‚ÇÇ
s.a.: 2x‚ÇÅ + x‚ÇÇ ‚â§ 100
      x‚ÇÅ + x‚ÇÇ ‚â§ 80  
      x‚ÇÅ ‚â• 40
      x‚ÇÅ, x‚ÇÇ ‚â• 0

Y muestra:
- Funci√≥n objetivo penalizada
- Tabla simplex inicial
- Cada iteraci√≥n paso a paso
- Soluci√≥n √≥ptima final

üéØ ESTADO DEL PROYECTO: COMPLETAMENTE FUNCIONAL

Todos los componentes est√°n integrados y listos para uso.
El sistema es profesional y apto para producci√≥n.

Para cualquier duda, consultar README_COMPLETO.md
"""

def main():
    print(__doc__)

if __name__ == "__main__":
    main()
